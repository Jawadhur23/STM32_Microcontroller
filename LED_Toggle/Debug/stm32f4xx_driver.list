
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000604  0800060c  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000604  08000604  0001060c  2**0
                  CONTENTS
  4 .ARM          00000000  08000604  08000604  0001060c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000604  0800060c  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000604  08000604  00010604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800060c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800060c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001060c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000889  00000000  00000000  00010635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000287  00000000  00000000  00010ebe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000080  00000000  00000000  000111f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d18  00000000  00000000  00011270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000bf3  00000000  00000000  00012f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008718  00000000  00000000  00013b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001c293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d4  00000000  00000000  0001c2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005ec 	.word	0x080005ec

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005ec 	.word	0x080005ec

08000170 <delay>:
// Using Push Pull Configuration

#include "stm32f4xx.h"

void delay(void)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	for( uint32_t i=0; i<500000; i++);
 8000176:	2300      	movs	r3, #0
 8000178:	607b      	str	r3, [r7, #4]
 800017a:	e002      	b.n	8000182 <delay+0x12>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	3301      	adds	r3, #1
 8000180:	607b      	str	r3, [r7, #4]
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	4a04      	ldr	r2, [pc, #16]	; (8000198 <delay+0x28>)
 8000186:	4293      	cmp	r3, r2
 8000188:	d9f8      	bls.n	800017c <delay+0xc>
}
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	370c      	adds	r7, #12
 8000190:	46bd      	mov	sp, r7
 8000192:	bc80      	pop	{r7}
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop
 8000198:	0007a11f 	.word	0x0007a11f

0800019c <main>:
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOD;
 80001a2:	4b0d      	ldr	r3, [pc, #52]	; (80001d8 <main+0x3c>)
 80001a4:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_12;
 80001a6:	230c      	movs	r3, #12
 80001a8:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OP;
 80001aa:	2301      	movs	r3, #1
 80001ac:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 80001ae:	2302      	movs	r3, #2
 80001b0:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_PP;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 80001b6:	2300      	movs	r3, #0
 80001b8:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80001ba:	2101      	movs	r1, #1
 80001bc:	4806      	ldr	r0, [pc, #24]	; (80001d8 <main+0x3c>)
 80001be:	f000 f837 	bl	8000230 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f91b 	bl	8000400 <GPIO_Init>
	while(1)
	{
		GPIO_ToggleOutput(GPIOD,GPIO_PIN_NO_12);
 80001ca:	210c      	movs	r1, #12
 80001cc:	4802      	ldr	r0, [pc, #8]	; (80001d8 <main+0x3c>)
 80001ce:	f000 f9d4 	bl	800057a <GPIO_ToggleOutput>
		delay();
 80001d2:	f7ff ffcd 	bl	8000170 <delay>
		GPIO_ToggleOutput(GPIOD,GPIO_PIN_NO_12);
 80001d6:	e7f8      	b.n	80001ca <main+0x2e>
 80001d8:	4003e000 	.word	0x4003e000

080001dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001dc:	480d      	ldr	r0, [pc, #52]	; (8000214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e4:	480c      	ldr	r0, [pc, #48]	; (8000218 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e6:	490d      	ldr	r1, [pc, #52]	; (800021c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e8:	4a0d      	ldr	r2, [pc, #52]	; (8000220 <LoopForever+0xe>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ec:	e002      	b.n	80001f4 <LoopCopyDataInit>

080001ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f2:	3304      	adds	r3, #4

080001f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f8:	d3f9      	bcc.n	80001ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fa:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001fc:	4c0a      	ldr	r4, [pc, #40]	; (8000228 <LoopForever+0x16>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000200:	e001      	b.n	8000206 <LoopFillZerobss>

08000202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000204:	3204      	adds	r2, #4

08000206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000208:	d3fb      	bcc.n	8000202 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800020a:	f000 f9cb 	bl	80005a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020e:	f7ff ffc5 	bl	800019c <main>

08000212 <LoopForever>:

LoopForever:
  b LoopForever
 8000212:	e7fe      	b.n	8000212 <LoopForever>
  ldr   r0, =_estack
 8000214:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000220:	0800060c 	.word	0x0800060c
  ldr r2, =_sbss
 8000224:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000228:	2000001c 	.word	0x2000001c

0800022c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC1_2_IRQHandler>
	...

08000230 <GPIO_PeriClockControl>:
 * @return 			- None
 *
 * @Note			- None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	460b      	mov	r3, r1
 800023a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800023c:	78fb      	ldrb	r3, [r7, #3]
 800023e:	2b01      	cmp	r3, #1
 8000240:	d162      	bne.n	8000308 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a64      	ldr	r2, [pc, #400]	; (80003d8 <GPIO_PeriClockControl+0x1a8>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800024a:	4b64      	ldr	r3, [pc, #400]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a63      	ldr	r2, [pc, #396]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOI_PCLK_DI();
				}
	}


}
 8000256:	e0b9      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a61      	ldr	r2, [pc, #388]	; (80003e0 <GPIO_PeriClockControl+0x1b0>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000260:	4b5e      	ldr	r3, [pc, #376]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a5d      	ldr	r2, [pc, #372]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800026c:	e0ae      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a5c      	ldr	r2, [pc, #368]	; (80003e4 <GPIO_PeriClockControl+0x1b4>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000276:	4b59      	ldr	r3, [pc, #356]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a58      	ldr	r2, [pc, #352]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000282:	e0a3      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a58      	ldr	r2, [pc, #352]	; (80003e8 <GPIO_PeriClockControl+0x1b8>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClockControl+0x6a>
					GPIOD_PCLK_EN();
 800028c:	4b53      	ldr	r3, [pc, #332]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a52      	ldr	r2, [pc, #328]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000292:	f043 0308 	orr.w	r3, r3, #8
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000298:	e098      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a53      	ldr	r2, [pc, #332]	; (80003ec <GPIO_PeriClockControl+0x1bc>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002a2:	4b4e      	ldr	r3, [pc, #312]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a4d      	ldr	r2, [pc, #308]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ae:	e08d      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a4f      	ldr	r2, [pc, #316]	; (80003f0 <GPIO_PeriClockControl+0x1c0>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d106      	bne.n	80002c6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002b8:	4b48      	ldr	r3, [pc, #288]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a47      	ldr	r2, [pc, #284]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002be:	f043 0320 	orr.w	r3, r3, #32
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c4:	e082      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	4a4a      	ldr	r2, [pc, #296]	; (80003f4 <GPIO_PeriClockControl+0x1c4>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002ce:	4b43      	ldr	r3, [pc, #268]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a42      	ldr	r2, [pc, #264]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002da:	e077      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	4a46      	ldr	r2, [pc, #280]	; (80003f8 <GPIO_PeriClockControl+0x1c8>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d106      	bne.n	80002f2 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80002e4:	4b3d      	ldr	r3, [pc, #244]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e8:	4a3c      	ldr	r2, [pc, #240]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002f0:	e06c      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	4a41      	ldr	r2, [pc, #260]	; (80003fc <GPIO_PeriClockControl+0x1cc>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d168      	bne.n	80003cc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80002fa:	4b38      	ldr	r3, [pc, #224]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a37      	ldr	r2, [pc, #220]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000306:	e061      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				if(pGPIOx == GPIOA)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	4a33      	ldr	r2, [pc, #204]	; (80003d8 <GPIO_PeriClockControl+0x1a8>)
 800030c:	4293      	cmp	r3, r2
 800030e:	d106      	bne.n	800031e <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000310:	4b32      	ldr	r3, [pc, #200]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000314:	4a31      	ldr	r2, [pc, #196]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031c:	e056      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOB)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4a2f      	ldr	r2, [pc, #188]	; (80003e0 <GPIO_PeriClockControl+0x1b0>)
 8000322:	4293      	cmp	r3, r2
 8000324:	d106      	bne.n	8000334 <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a2c      	ldr	r2, [pc, #176]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800032c:	f023 0302 	bic.w	r3, r3, #2
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000332:	e04b      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOC)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	4a2b      	ldr	r2, [pc, #172]	; (80003e4 <GPIO_PeriClockControl+0x1b4>)
 8000338:	4293      	cmp	r3, r2
 800033a:	d106      	bne.n	800034a <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 800033c:	4b27      	ldr	r3, [pc, #156]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a26      	ldr	r2, [pc, #152]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000342:	f023 0304 	bic.w	r3, r3, #4
 8000346:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000348:	e040      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOD)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4a26      	ldr	r2, [pc, #152]	; (80003e8 <GPIO_PeriClockControl+0x1b8>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d106      	bne.n	8000360 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000356:	4a21      	ldr	r2, [pc, #132]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000358:	f023 0308 	bic.w	r3, r3, #8
 800035c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035e:	e035      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOE)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <GPIO_PeriClockControl+0x1bc>)
 8000364:	4293      	cmp	r3, r2
 8000366:	d106      	bne.n	8000376 <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000368:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a1b      	ldr	r2, [pc, #108]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800036e:	f023 0310 	bic.w	r3, r3, #16
 8000372:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000374:	e02a      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOF)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <GPIO_PeriClockControl+0x1c0>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000382:	4a16      	ldr	r2, [pc, #88]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000384:	f023 0320 	bic.w	r3, r3, #32
 8000388:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038a:	e01f      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOG)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a19      	ldr	r2, [pc, #100]	; (80003f4 <GPIO_PeriClockControl+0x1c4>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 8000396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000398:	4a10      	ldr	r2, [pc, #64]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 800039a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800039e:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a0:	e014      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOH)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <GPIO_PeriClockControl+0x1c8>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80003ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ae:	4a0b      	ldr	r2, [pc, #44]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80003b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003b4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b6:	e009      	b.n	80003cc <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOI)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a10      	ldr	r2, [pc, #64]	; (80003fc <GPIO_PeriClockControl+0x1cc>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d105      	bne.n	80003cc <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80003c0:	4b06      	ldr	r3, [pc, #24]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4a05      	ldr	r2, [pc, #20]	; (80003dc <GPIO_PeriClockControl+0x1ac>)
 80003c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003ca:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bc80      	pop	{r7}
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40020000 	.word	0x40020000
 80003dc:	40218000 	.word	0x40218000
 80003e0:	4002a000 	.word	0x4002a000
 80003e4:	40034000 	.word	0x40034000
 80003e8:	4003e000 	.word	0x4003e000
 80003ec:	40048000 	.word	0x40048000
 80003f0:	40052000 	.word	0x40052000
 80003f4:	4005c000 	.word	0x4005c000
 80003f8:	40066000 	.word	0x40066000
 80003fc:	40070000 	.word	0x40070000

08000400 <GPIO_Init>:
 * @return 			- None
 *
 * @Note			- None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000400:	b480      	push	{r7}
 8000402:	b087      	sub	sp, #28
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	uint32_t  temp=0;	//Temp Register
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
	//1. Configuring the Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	795b      	ldrb	r3, [r3, #5]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d820      	bhi.n	8000456 <GPIO_Init+0x56>
	{
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));//Since 2 set of bits combined we will Multiply with the Pin to get an Correct Pin
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	795b      	ldrb	r3, [r3, #5]
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	fa02 f303 	lsl.w	r3, r2, r3
 8000424:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	681a      	ldr	r2, [r3, #0]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	4619      	mov	r1, r3
 8000432:	2303      	movs	r3, #3
 8000434:	408b      	lsls	r3, r1
 8000436:	43db      	mvns	r3, r3
 8000438:	4619      	mov	r1, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	400a      	ands	r2, r1
 8000440:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;//Actual Register
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	697a      	ldr	r2, [r7, #20]
 800044e:	430a      	orrs	r2, r1
 8000450:	601a      	str	r2, [r3, #0]

		temp=0;
 8000452:	2300      	movs	r3, #0
 8000454:	617b      	str	r3, [r7, #20]
	}
	else
	{

	}
	temp=0;
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]

	//2. Configure the Speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	799b      	ldrb	r3, [r3, #6]
 800045e:	461a      	mov	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	791b      	ldrb	r3, [r3, #4]
 8000464:	005b      	lsls	r3, r3, #1
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	689a      	ldr	r2, [r3, #8]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	4619      	mov	r1, r3
 8000478:	2303      	movs	r3, #3
 800047a:	408b      	lsls	r3, r1
 800047c:	43db      	mvns	r3, r3
 800047e:	4619      	mov	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	400a      	ands	r2, r1
 8000486:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	6899      	ldr	r1, [r3, #8]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	697a      	ldr	r2, [r7, #20]
 8000494:	430a      	orrs	r2, r1
 8000496:	609a      	str	r2, [r3, #8]

	temp=0;
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

	//3. COnfigure the PU->PullUp and PD->PullDown Register
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	79db      	ldrb	r3, [r3, #7]
 80004a0:	461a      	mov	r2, r3
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	791b      	ldrb	r3, [r3, #4]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	791b      	ldrb	r3, [r3, #4]
 80004b8:	4619      	mov	r1, r3
 80004ba:	2303      	movs	r3, #3
 80004bc:	408b      	lsls	r3, r1
 80004be:	43db      	mvns	r3, r3
 80004c0:	4619      	mov	r1, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	400a      	ands	r2, r1
 80004c8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	68d9      	ldr	r1, [r3, #12]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	697a      	ldr	r2, [r7, #20]
 80004d6:	430a      	orrs	r2, r1
 80004d8:	60da      	str	r2, [r3, #12]

	temp=0;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]
	//4. COnfigure THE OPType
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	7a1b      	ldrb	r3, [r3, #8]
 80004e2:	461a      	mov	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	fa02 f303 	lsl.w	r3, r2, r3
 80004ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	685a      	ldr	r2, [r3, #4]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	791b      	ldrb	r3, [r3, #4]
 80004fa:	4619      	mov	r1, r3
 80004fc:	2301      	movs	r3, #1
 80004fe:	408b      	lsls	r3, r1
 8000500:	43db      	mvns	r3, r3
 8000502:	4619      	mov	r1, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	400a      	ands	r2, r1
 800050a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx-> OTYPER |=temp;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	6859      	ldr	r1, [r3, #4]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	697a      	ldr	r2, [r7, #20]
 8000518:	430a      	orrs	r2, r1
 800051a:	605a      	str	r2, [r3, #4]

	temp=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
	//5. Configure the Alternate Functionality
	//This will be used when in PinMode is set to Alternate Functionality Mode or otherwise it wont be used.
	//In this Section 4 bits are dedicated as a Single Pin
	//Ex: Assume Temp1-> 6/8 = 0 when 0 it is AFR[0]
	//Again AFR |temp1}-> |6/8|=0 when it value << (4*temp2) i.e; pin is 6 from there 6*4=24th pi we will start to configure
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	795b      	ldrb	r3, [r3, #5]
 8000524:	2b02      	cmp	r3, #2
 8000526:	d123      	bne.n	8000570 <GPIO_Init+0x170>
	{
		uint32_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	08db      	lsrs	r3, r3, #3
 800052e:	b2db      	uxtb	r3, r3
 8000530:	613b      	str	r3, [r7, #16]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
 8000536:	f003 0307 	and.w	r3, r3, #7
 800053a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->AFR[temp1]= ~(0xF << (4*temp2));
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	220f      	movs	r2, #15
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	43da      	mvns	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4611      	mov	r1, r2
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	3208      	adds	r2, #8
 8000552:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1]= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	7a5b      	ldrb	r3, [r3, #9]
 800055a:	461a      	mov	r2, r3
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	409a      	lsls	r2, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4611      	mov	r1, r2
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	3208      	adds	r2, #8
 800056c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000570:	bf00      	nop
 8000572:	371c      	adds	r7, #28
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr

0800057a <GPIO_ToggleOutput>:
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value;
}
void GPIO_ToggleOutput(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	70fb      	strb	r3, [r7, #3]
	pGPIOx ->ODR = pGPIOx->ODR ^(1 << PinNumber);			//Here just we are Doing an bitwise XOR Operation for Toggling
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	78fa      	ldrb	r2, [r7, #3]
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	405a      	eors	r2, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	615a      	str	r2, [r3, #20]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
	...

080005a4 <__libc_init_array>:
 80005a4:	b570      	push	{r4, r5, r6, lr}
 80005a6:	2600      	movs	r6, #0
 80005a8:	4d0c      	ldr	r5, [pc, #48]	; (80005dc <__libc_init_array+0x38>)
 80005aa:	4c0d      	ldr	r4, [pc, #52]	; (80005e0 <__libc_init_array+0x3c>)
 80005ac:	1b64      	subs	r4, r4, r5
 80005ae:	10a4      	asrs	r4, r4, #2
 80005b0:	42a6      	cmp	r6, r4
 80005b2:	d109      	bne.n	80005c8 <__libc_init_array+0x24>
 80005b4:	f000 f81a 	bl	80005ec <_init>
 80005b8:	2600      	movs	r6, #0
 80005ba:	4d0a      	ldr	r5, [pc, #40]	; (80005e4 <__libc_init_array+0x40>)
 80005bc:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <__libc_init_array+0x44>)
 80005be:	1b64      	subs	r4, r4, r5
 80005c0:	10a4      	asrs	r4, r4, #2
 80005c2:	42a6      	cmp	r6, r4
 80005c4:	d105      	bne.n	80005d2 <__libc_init_array+0x2e>
 80005c6:	bd70      	pop	{r4, r5, r6, pc}
 80005c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005cc:	4798      	blx	r3
 80005ce:	3601      	adds	r6, #1
 80005d0:	e7ee      	b.n	80005b0 <__libc_init_array+0xc>
 80005d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005d6:	4798      	blx	r3
 80005d8:	3601      	adds	r6, #1
 80005da:	e7f2      	b.n	80005c2 <__libc_init_array+0x1e>
 80005dc:	08000604 	.word	0x08000604
 80005e0:	08000604 	.word	0x08000604
 80005e4:	08000604 	.word	0x08000604
 80005e8:	08000608 	.word	0x08000608

080005ec <_init>:
 80005ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ee:	bf00      	nop
 80005f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f2:	bc08      	pop	{r3}
 80005f4:	469e      	mov	lr, r3
 80005f6:	4770      	bx	lr

080005f8 <_fini>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	bf00      	nop
 80005fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fe:	bc08      	pop	{r3}
 8000600:	469e      	mov	lr, r3
 8000602:	4770      	bx	lr
