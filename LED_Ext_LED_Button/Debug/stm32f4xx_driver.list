
stm32f4xx_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000760  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000890  08000898  00010898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000890  08000890  00010898  2**0
                  CONTENTS
  4 .ARM          00000000  08000890  08000890  00010898  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000890  08000898  00010898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000890  08000890  00010890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000894  08000894  00010894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010898  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000898  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000898  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010898  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ae5  00000000  00000000  000108c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002a3  00000000  00000000  000113a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00011650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  00011710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e9d  00000000  00000000  000117a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000dfb  00000000  00000000  00013645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008cd8  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001d118  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000270  00000000  00000000  0001d168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000878 	.word	0x08000878

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000878 	.word	0x08000878

08000170 <main>:
{
	//this will introduce 200ms delay when system clock is 16MHz
	for( uint32_t i=0; i<500000/2; i++);
}
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
int main(void)
 8000176:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800017a:	61fb      	str	r3, [r7, #28]
	//In application we clear each and Every element to zero
	GPIO_Handle_t GpioLed, GPIOBtn;
	memset(&GpioLed, 0, sizeof(GpioLed));
 800017c:	f107 0310 	add.w	r3, r7, #16
 8000180:	220c      	movs	r2, #12
 8000182:	2100      	movs	r1, #0
 8000184:	4618      	mov	r0, r3
 8000186:	f000 fb6f 	bl	8000868 <memset>
	memset(&GPIOBtn, 0, sizeof(GPIOBtn));
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	220c      	movs	r2, #12
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f000 fb69 	bl	8000868 <memset>

	GpioLed.pGPIOx = GPIOD;
 8000196:	4b1a      	ldr	r3, [pc, #104]	; (8000200 <main+0x90>)
 8000198:	613b      	str	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_12;
 800019a:	230c      	movs	r3, #12
 800019c:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_OP;
 800019e:	2301      	movs	r3, #1
 80001a0:	757b      	strb	r3, [r7, #21]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_LOW;
 80001a2:	2300      	movs	r3, #0
 80001a4:	75bb      	strb	r3, [r7, #22]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_PP;
 80001a6:	2300      	movs	r3, #0
 80001a8:	763b      	strb	r3, [r7, #24]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;
 80001aa:	2300      	movs	r3, #0
 80001ac:	75fb      	strb	r3, [r7, #23]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80001ae:	2101      	movs	r1, #1
 80001b0:	4813      	ldr	r0, [pc, #76]	; (8000200 <main+0x90>)
 80001b2:	f000 f851 	bl	8000258 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80001b6:	f107 0310 	add.w	r3, r7, #16
 80001ba:	4618      	mov	r0, r3
 80001bc:	f000 f934 	bl	8000428 <GPIO_Init>

	GPIOBtn.pGPIOx = GPIOD; //GPIO is connected to PA0 so, we should write like this.
 80001c0:	4b0f      	ldr	r3, [pc, #60]	; (8000200 <main+0x90>)
 80001c2:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber= GPIO_PIN_NO_5;//GPIO is connected to PA0 so, we should write like this.
 80001c4:	2305      	movs	r3, #5
 80001c6:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode= GPIO_MODE_IT_FT;
 80001c8:	2304      	movs	r3, #4
 80001ca:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed= GPIO_SPEED_FAST;
 80001cc:	2302      	movs	r3, #2
 80001ce:	72bb      	strb	r3, [r7, #10]
	//GPIOBtn.GPIO_PinConfig.GPIO_PinOPType= GPIO_OP_TYPE_OD;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_PIN_PU;//We are using internal Pull up
 80001d0:	2301      	movs	r3, #1
 80001d2:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 80001d4:	2101      	movs	r1, #1
 80001d6:	480a      	ldr	r0, [pc, #40]	; (8000200 <main+0x90>)
 80001d8:	f000 f83e 	bl	8000258 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	4618      	mov	r0, r3
 80001e0:	f000 f922 	bl	8000428 <GPIO_Init>

	//IRQ Configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,NVIC_IRQ_PRI15); //Priority Configuration
 80001e4:	210f      	movs	r1, #15
 80001e6:	2017      	movs	r0, #23
 80001e8:	f000 faec 	bl	80007c4 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 80001ec:	2101      	movs	r1, #1
 80001ee:	2017      	movs	r0, #23
 80001f0:	f000 fa64 	bl	80006bc <GPIO_IRQInterruptConfig>
	{
		delay();//200ms
		GPIO_IRQHandling(GPIO_PIN_NO_5);
		GPIO_ToggleOutput(GPIOD, GPIO_PIN_NO_12);
	}
	return 0;
 80001f4:	2300      	movs	r3, #0
}
 80001f6:	4618      	mov	r0, r3
 80001f8:	3720      	adds	r7, #32
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bd80      	pop	{r7, pc}
 80001fe:	bf00      	nop
 8000200:	4003e000 	.word	0x4003e000

08000204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000206:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000208:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <LoopForever+0x6>)
  ldr r1, =_edata
 800020e:	490d      	ldr	r1, [pc, #52]	; (8000244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LoopForever+0xe>)
  movs r3, #0
 8000212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000214:	e002      	b.n	800021c <LoopCopyDataInit>

08000216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800021a:	3304      	adds	r3, #4

0800021c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800021c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800021e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000220:	d3f9      	bcc.n	8000216 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000224:	4c0a      	ldr	r4, [pc, #40]	; (8000250 <LoopForever+0x16>)
  movs r3, #0
 8000226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000228:	e001      	b.n	800022e <LoopFillZerobss>

0800022a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800022a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800022c:	3204      	adds	r2, #4

0800022e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800022e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000230:	d3fb      	bcc.n	800022a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000232:	f000 faf5 	bl	8000820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000236:	f7ff ff9b 	bl	8000170 <main>

0800023a <LoopForever>:

LoopForever:
  b LoopForever
 800023a:	e7fe      	b.n	800023a <LoopForever>
  ldr   r0, =_estack
 800023c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000244:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000248:	08000898 	.word	0x08000898
  ldr r2, =_sbss
 800024c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000250:	2000001c 	.word	0x2000001c

08000254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC1_2_IRQHandler>
	...

08000258 <GPIO_PeriClockControl>:
 * @return 			- None
 *
 * @Note			- None
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
 8000260:	460b      	mov	r3, r1
 8000262:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000264:	78fb      	ldrb	r3, [r7, #3]
 8000266:	2b01      	cmp	r3, #1
 8000268:	d162      	bne.n	8000330 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	4a64      	ldr	r2, [pc, #400]	; (8000400 <GPIO_PeriClockControl+0x1a8>)
 800026e:	4293      	cmp	r3, r2
 8000270:	d106      	bne.n	8000280 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000272:	4b64      	ldr	r3, [pc, #400]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000276:	4a63      	ldr	r2, [pc, #396]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000278:	f043 0301 	orr.w	r3, r3, #1
 800027c:	6313      	str	r3, [r2, #48]	; 0x30
					GPIOI_PCLK_DI();
				}
	}


}
 800027e:	e0b9      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOB)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4a61      	ldr	r2, [pc, #388]	; (8000408 <GPIO_PeriClockControl+0x1b0>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d106      	bne.n	8000296 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000288:	4b5e      	ldr	r3, [pc, #376]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a5d      	ldr	r2, [pc, #372]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800028e:	f043 0302 	orr.w	r3, r3, #2
 8000292:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000294:	e0ae      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOC)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	4a5c      	ldr	r2, [pc, #368]	; (800040c <GPIO_PeriClockControl+0x1b4>)
 800029a:	4293      	cmp	r3, r2
 800029c:	d106      	bne.n	80002ac <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800029e:	4b59      	ldr	r3, [pc, #356]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a2:	4a58      	ldr	r2, [pc, #352]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002a4:	f043 0304 	orr.w	r3, r3, #4
 80002a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002aa:	e0a3      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOD)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a58      	ldr	r2, [pc, #352]	; (8000410 <GPIO_PeriClockControl+0x1b8>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d106      	bne.n	80002c2 <GPIO_PeriClockControl+0x6a>
					GPIOD_PCLK_EN();
 80002b4:	4b53      	ldr	r3, [pc, #332]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a52      	ldr	r2, [pc, #328]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002ba:	f043 0308 	orr.w	r3, r3, #8
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002c0:	e098      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOE)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a53      	ldr	r2, [pc, #332]	; (8000414 <GPIO_PeriClockControl+0x1bc>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80002ca:	4b4e      	ldr	r3, [pc, #312]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a4d      	ldr	r2, [pc, #308]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002d0:	f043 0310 	orr.w	r3, r3, #16
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d6:	e08d      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOF)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a4f      	ldr	r2, [pc, #316]	; (8000418 <GPIO_PeriClockControl+0x1c0>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80002e0:	4b48      	ldr	r3, [pc, #288]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a47      	ldr	r2, [pc, #284]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ec:	e082      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOG)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a4a      	ldr	r2, [pc, #296]	; (800041c <GPIO_PeriClockControl+0x1c4>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80002f6:	4b43      	ldr	r3, [pc, #268]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a42      	ldr	r2, [pc, #264]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80002fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000302:	e077      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOH)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a46      	ldr	r2, [pc, #280]	; (8000420 <GPIO_PeriClockControl+0x1c8>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 800030c:	4b3d      	ldr	r3, [pc, #244]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a3c      	ldr	r2, [pc, #240]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000318:	e06c      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
		else if(pGPIOx == GPIOI)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a41      	ldr	r2, [pc, #260]	; (8000424 <GPIO_PeriClockControl+0x1cc>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d168      	bne.n	80003f4 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000322:	4b38      	ldr	r3, [pc, #224]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a37      	ldr	r2, [pc, #220]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032e:	e061      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				if(pGPIOx == GPIOA)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a33      	ldr	r2, [pc, #204]	; (8000400 <GPIO_PeriClockControl+0x1a8>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClockControl+0xee>
					GPIOA_PCLK_DI();
 8000338:	4b32      	ldr	r3, [pc, #200]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a31      	ldr	r2, [pc, #196]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000344:	e056      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOB)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a2f      	ldr	r2, [pc, #188]	; (8000408 <GPIO_PeriClockControl+0x1b0>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClockControl+0x104>
					GPIOB_PCLK_DI();
 800034e:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a2c      	ldr	r2, [pc, #176]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000354:	f023 0302 	bic.w	r3, r3, #2
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035a:	e04b      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOC)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a2b      	ldr	r2, [pc, #172]	; (800040c <GPIO_PeriClockControl+0x1b4>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriClockControl+0x11a>
					GPIOC_PCLK_DI();
 8000364:	4b27      	ldr	r3, [pc, #156]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a26      	ldr	r2, [pc, #152]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800036a:	f023 0304 	bic.w	r3, r3, #4
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e040      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOD)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a26      	ldr	r2, [pc, #152]	; (8000410 <GPIO_PeriClockControl+0x1b8>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriClockControl+0x130>
					GPIOD_PCLK_DI();
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a21      	ldr	r2, [pc, #132]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000380:	f023 0308 	bic.w	r3, r3, #8
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e035      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOE)
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a22      	ldr	r2, [pc, #136]	; (8000414 <GPIO_PeriClockControl+0x1bc>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriClockControl+0x146>
					GPIOE_PCLK_DI();
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a1b      	ldr	r2, [pc, #108]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 8000396:	f023 0310 	bic.w	r3, r3, #16
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e02a      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOF)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <GPIO_PeriClockControl+0x1c0>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x15c>
					GPIOF_PCLK_DI();
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a16      	ldr	r2, [pc, #88]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003ac:	f023 0320 	bic.w	r3, r3, #32
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e01f      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOG)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a19      	ldr	r2, [pc, #100]	; (800041c <GPIO_PeriClockControl+0x1c4>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x172>
					GPIOG_PCLK_DI();
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a10      	ldr	r2, [pc, #64]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e014      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOH)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a14      	ldr	r2, [pc, #80]	; (8000420 <GPIO_PeriClockControl+0x1c8>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x188>
					GPIOH_PCLK_DI();
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e009      	b.n	80003f4 <GPIO_PeriClockControl+0x19c>
				else if(pGPIOx == GPIOI)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a10      	ldr	r2, [pc, #64]	; (8000424 <GPIO_PeriClockControl+0x1cc>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d105      	bne.n	80003f4 <GPIO_PeriClockControl+0x19c>
					GPIOI_PCLK_DI();
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a05      	ldr	r2, [pc, #20]	; (8000404 <GPIO_PeriClockControl+0x1ac>)
 80003ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40020000 	.word	0x40020000
 8000404:	40218000 	.word	0x40218000
 8000408:	4002a000 	.word	0x4002a000
 800040c:	40034000 	.word	0x40034000
 8000410:	4003e000 	.word	0x4003e000
 8000414:	40048000 	.word	0x40048000
 8000418:	40052000 	.word	0x40052000
 800041c:	4005c000 	.word	0x4005c000
 8000420:	40066000 	.word	0x40066000
 8000424:	40070000 	.word	0x40070000

08000428 <GPIO_Init>:
 * @return 			- None
 *
 * @Note			- None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000428:	b480      	push	{r7}
 800042a:	b087      	sub	sp, #28
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	uint32_t  temp=0;	//Temp Register
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
	//1. Configuring the Mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d821      	bhi.n	8000480 <GPIO_Init+0x58>
	{
		temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber));//Since 2 set of bits combined we will Multiply with the Pin to get an Correct Pin
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	795b      	ldrb	r3, [r3, #5]
 8000440:	461a      	mov	r2, r3
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	791b      	ldrb	r3, [r3, #4]
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	791b      	ldrb	r3, [r3, #4]
 8000458:	4619      	mov	r1, r3
 800045a:	2303      	movs	r3, #3
 800045c:	408b      	lsls	r3, r1
 800045e:	43db      	mvns	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	400a      	ands	r2, r1
 8000468:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |=temp;//Actual Register
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	697a      	ldr	r2, [r7, #20]
 8000476:	430a      	orrs	r2, r1
 8000478:	601a      	str	r2, [r3, #0]

		temp=0;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e083      	b.n	8000588 <GPIO_Init+0x160>
	}
	else
	{
		// In this whatever we are configuring is a peripheral specific
		//EXTI is a Peripheral Configuration
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)//IT Falling Edge
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b04      	cmp	r3, #4
 8000486:	d117      	bne.n	80004b8 <GPIO_Init+0x90>
		{
			//1. Configure the FTSR(Falling Trigger Selection Register)
			//FTSR is a Register of EXTI
			EXTI -> FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000488:	4b88      	ldr	r3, [pc, #544]	; (80006ac <GPIO_Init+0x284>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	7912      	ldrb	r2, [r2, #4]
 8000490:	4611      	mov	r1, r2
 8000492:	2201      	movs	r2, #1
 8000494:	408a      	lsls	r2, r1
 8000496:	4611      	mov	r1, r2
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <GPIO_Init+0x284>)
 800049a:	430b      	orrs	r3, r1
 800049c:	60d3      	str	r3, [r2, #12]
			//Clear the Corresponding RTSR bit
			EXTI -> RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049e:	4b83      	ldr	r3, [pc, #524]	; (80006ac <GPIO_Init+0x284>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	7912      	ldrb	r2, [r2, #4]
 80004a6:	4611      	mov	r1, r2
 80004a8:	2201      	movs	r2, #1
 80004aa:	408a      	lsls	r2, r1
 80004ac:	43d2      	mvns	r2, r2
 80004ae:	4611      	mov	r1, r2
 80004b0:	4a7e      	ldr	r2, [pc, #504]	; (80006ac <GPIO_Init+0x284>)
 80004b2:	400b      	ands	r3, r1
 80004b4:	6093      	str	r3, [r2, #8]
 80004b6:	e035      	b.n	8000524 <GPIO_Init+0xfc>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2b05      	cmp	r3, #5
 80004be:	d117      	bne.n	80004f0 <GPIO_Init+0xc8>
		{
			//1.Configure the RTSR(Rising trigger Selection Register)
			EXTI -> RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c0:	4b7a      	ldr	r3, [pc, #488]	; (80006ac <GPIO_Init+0x284>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	4611      	mov	r1, r2
 80004d0:	4a76      	ldr	r2, [pc, #472]	; (80006ac <GPIO_Init+0x284>)
 80004d2:	430b      	orrs	r3, r1
 80004d4:	6093      	str	r3, [r2, #8]
			//Clear the Corresponding FTSR bit
			EXTI -> FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d6:	4b75      	ldr	r3, [pc, #468]	; (80006ac <GPIO_Init+0x284>)
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	7912      	ldrb	r2, [r2, #4]
 80004de:	4611      	mov	r1, r2
 80004e0:	2201      	movs	r2, #1
 80004e2:	408a      	lsls	r2, r1
 80004e4:	43d2      	mvns	r2, r2
 80004e6:	4611      	mov	r1, r2
 80004e8:	4a70      	ldr	r2, [pc, #448]	; (80006ac <GPIO_Init+0x284>)
 80004ea:	400b      	ands	r3, r1
 80004ec:	60d3      	str	r3, [r2, #12]
 80004ee:	e019      	b.n	8000524 <GPIO_Init+0xfc>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b06      	cmp	r3, #6
 80004f6:	d115      	bne.n	8000524 <GPIO_Init+0xfc>
		{
			//Configure both FTSR and RTSR
			//Configure FTSR bit
			EXTI -> RTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	4b6c      	ldr	r3, [pc, #432]	; (80006ac <GPIO_Init+0x284>)
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	4611      	mov	r1, r2
 8000508:	4a68      	ldr	r2, [pc, #416]	; (80006ac <GPIO_Init+0x284>)
 800050a:	430b      	orrs	r3, r1
 800050c:	6093      	str	r3, [r2, #8]
			//Configure RTSR bit
			EXTI -> FTSR |=(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050e:	4b67      	ldr	r3, [pc, #412]	; (80006ac <GPIO_Init+0x284>)
 8000510:	68db      	ldr	r3, [r3, #12]
 8000512:	687a      	ldr	r2, [r7, #4]
 8000514:	7912      	ldrb	r2, [r2, #4]
 8000516:	4611      	mov	r1, r2
 8000518:	2201      	movs	r2, #1
 800051a:	408a      	lsls	r2, r1
 800051c:	4611      	mov	r1, r2
 800051e:	4a63      	ldr	r2, [pc, #396]	; (80006ac <GPIO_Init+0x284>)
 8000520:	430b      	orrs	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
		}

		//2.Configure the GPIO Port selection in SYSCFG_EXITCR
		uint8_t temp1 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber /4;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	089b      	lsrs	r3, r3, #2
 800052a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber %4;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	791b      	ldrb	r3, [r3, #4]
 8000530:	f003 0303 	and.w	r3, r3, #3
 8000534:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a5d      	ldr	r2, [pc, #372]	; (80006b0 <GPIO_Init+0x288>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d006      	beq.n	800054e <GPIO_Init+0x126>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a5a      	ldr	r2, [pc, #360]	; (80006b0 <GPIO_Init+0x288>)
 8000546:	4293      	cmp	r3, r2
 8000548:	d101      	bne.n	800054e <GPIO_Init+0x126>
 800054a:	2301      	movs	r3, #1
 800054c:	e000      	b.n	8000550 <GPIO_Init+0x128>
 800054e:	2300      	movs	r3, #0
 8000550:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000552:	4b58      	ldr	r3, [pc, #352]	; (80006b4 <GPIO_Init+0x28c>)
 8000554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000556:	4a57      	ldr	r2, [pc, #348]	; (80006b4 <GPIO_Init+0x28c>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG -> EXTICR[temp1]=portcode << (temp2 *4);
 800055e:	7c7a      	ldrb	r2, [r7, #17]
 8000560:	7cbb      	ldrb	r3, [r7, #18]
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	fa02 f103 	lsl.w	r1, r2, r3
 8000568:	4a53      	ldr	r2, [pc, #332]	; (80006b8 <GPIO_Init+0x290>)
 800056a:	7cfb      	ldrb	r3, [r7, #19]
 800056c:	3302      	adds	r3, #2
 800056e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3.Enable the EXTI Interrupt delivery using IMR
		EXTI->IMR |= 1<<pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber;
 8000572:	4b4e      	ldr	r3, [pc, #312]	; (80006ac <GPIO_Init+0x284>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a4a      	ldr	r2, [pc, #296]	; (80006ac <GPIO_Init+0x284>)
 8000584:	430b      	orrs	r3, r1
 8000586:	6013      	str	r3, [r2, #0]

	}
	temp=0;
 8000588:	2300      	movs	r3, #0
 800058a:	617b      	str	r3, [r7, #20]

	//2. Configure the Speed
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	799b      	ldrb	r3, [r3, #6]
 8000590:	461a      	mov	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	791b      	ldrb	r3, [r3, #4]
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	fa02 f303 	lsl.w	r3, r2, r3
 800059c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &=~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	689a      	ldr	r2, [r3, #8]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	4619      	mov	r1, r3
 80005aa:	2303      	movs	r3, #3
 80005ac:	408b      	lsls	r3, r1
 80005ae:	43db      	mvns	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	400a      	ands	r2, r1
 80005b8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |=temp;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	6899      	ldr	r1, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	609a      	str	r2, [r3, #8]

	temp=0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

	//3. COnfigure the PU->PullUp and PD->PullDown Register
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	79db      	ldrb	r3, [r3, #7]
 80005d2:	461a      	mov	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &=~(0x3 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	68da      	ldr	r2, [r3, #12]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	4619      	mov	r1, r3
 80005ec:	2303      	movs	r3, #3
 80005ee:	408b      	lsls	r3, r1
 80005f0:	43db      	mvns	r3, r3
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	400a      	ands	r2, r1
 80005fa:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68d9      	ldr	r1, [r3, #12]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	697a      	ldr	r2, [r7, #20]
 8000608:	430a      	orrs	r2, r1
 800060a:	60da      	str	r2, [r3, #12]

	temp=0;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
	//4. COnfigure THE OPType
	temp=(pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle -> GPIO_PinConfig.GPIO_PinNumber));
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	7a1b      	ldrb	r3, [r3, #8]
 8000614:	461a      	mov	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	005b      	lsls	r3, r3, #1
 800061c:	fa02 f303 	lsl.w	r3, r2, r3
 8000620:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle ->GPIO_PinConfig.GPIO_PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx-> OTYPER |=temp;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	6859      	ldr	r1, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]

	temp=0;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
	//5. Configure the Alternate Functionality
	//This will be used when in PinMode is set to Alternate Functionality Mode or otherwise it wont be used.
	//In this Section 4 bits are dedicated as a Single Pin
	//Ex: Assume Temp1-> 6/8 = 0 when 0 it is AFR[0]
	//Again AFR |temp1}-> |6/8|=0 when it value << (4*temp2) i.e; pin is 6 from there 6*4=24th pi we will start to configure
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	795b      	ldrb	r3, [r3, #5]
 8000656:	2b02      	cmp	r3, #2
 8000658:	d123      	bne.n	80006a2 <GPIO_Init+0x27a>
	{
		uint32_t temp1, temp2;
		temp1=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber /8;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	08db      	lsrs	r3, r3, #3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]
		temp2=pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber %8;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	f003 0307 	and.w	r3, r3, #7
 800066c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1]= ~(0xF << (4*temp2));
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	009b      	lsls	r3, r3, #2
 8000672:	220f      	movs	r2, #15
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	43da      	mvns	r2, r3
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4611      	mov	r1, r2
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	3208      	adds	r2, #8
 8000684:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1]= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7a5b      	ldrb	r3, [r3, #9]
 800068c:	461a      	mov	r2, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	409a      	lsls	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4611      	mov	r1, r2
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	3208      	adds	r2, #8
 800069e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006a2:	bf00      	nop
 80006a4:	371c      	adds	r7, #28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	4006a000 	.word	0x4006a000
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40218000 	.word	0x40218000
 80006b8:	400b8000 	.word	0x400b8000

080006bc <GPIO_IRQInterruptConfig>:
 *
 * @Note			- None
 */

void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	71fb      	strb	r3, [r7, #7]
 80006c8:	4613      	mov	r3, r2
 80006ca:	71bb      	strb	r3, [r7, #6]
	//In this whatever we are configuring is a Processor SPecific
	if(EnorDi == ENABLE)
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	2b01      	cmp	r3, #1
 80006d0:	d133      	bne.n	800073a <GPIO_IRQInterruptConfig+0x7e>
	{
		if(IRQNumber<=31)
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	2b1f      	cmp	r3, #31
 80006d6:	d80a      	bhi.n	80006ee <GPIO_IRQInterruptConfig+0x32>
		{
			//Program ISER0 Register
			*NVIC_ISER0 |=(1<<IRQNumber);
 80006d8:	4b34      	ldr	r3, [pc, #208]	; (80007ac <GPIO_IRQInterruptConfig+0xf0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	2101      	movs	r1, #1
 80006e0:	fa01 f202 	lsl.w	r2, r1, r2
 80006e4:	4611      	mov	r1, r2
 80006e6:	4a31      	ldr	r2, [pc, #196]	; (80007ac <GPIO_IRQInterruptConfig+0xf0>)
 80006e8:	430b      	orrs	r3, r1
 80006ea:	6013      	str	r3, [r2, #0]
			//Program ICER2 Register which ranges from 6 to 95
			*NVIC_ICER3 |=(1<<IRQNumber %64);
		}
	}

}
 80006ec:	e059      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber<96)
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	2b3f      	cmp	r3, #63	; 0x3f
 80006f2:	d90f      	bls.n	8000714 <GPIO_IRQInterruptConfig+0x58>
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b5f      	cmp	r3, #95	; 0x5f
 80006f8:	d80c      	bhi.n	8000714 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |=(1<<IRQNumber % 32);
 80006fa:	4b2d      	ldr	r3, [pc, #180]	; (80007b0 <GPIO_IRQInterruptConfig+0xf4>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	f002 021f 	and.w	r2, r2, #31
 8000704:	2101      	movs	r1, #1
 8000706:	fa01 f202 	lsl.w	r2, r1, r2
 800070a:	4611      	mov	r1, r2
 800070c:	4a28      	ldr	r2, [pc, #160]	; (80007b0 <GPIO_IRQInterruptConfig+0xf4>)
 800070e:	430b      	orrs	r3, r1
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e046      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >=64 && IRQNumber <96)
 8000714:	79fb      	ldrb	r3, [r7, #7]
 8000716:	2b3f      	cmp	r3, #63	; 0x3f
 8000718:	d943      	bls.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	2b5f      	cmp	r3, #95	; 0x5f
 800071e:	d840      	bhi.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER3 |=(1<<IRQNumber %64);
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <GPIO_IRQInterruptConfig+0xf8>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	79fa      	ldrb	r2, [r7, #7]
 8000726:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	4611      	mov	r1, r2
 8000732:	4a20      	ldr	r2, [pc, #128]	; (80007b4 <GPIO_IRQInterruptConfig+0xf8>)
 8000734:	430b      	orrs	r3, r1
 8000736:	6013      	str	r3, [r2, #0]
}
 8000738:	e033      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
		if(IRQNumber <= 31)
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b1f      	cmp	r3, #31
 800073e:	d80a      	bhi.n	8000756 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |=(1<<IRQNumber);
 8000740:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <GPIO_IRQInterruptConfig+0xfc>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	4611      	mov	r1, r2
 800074e:	4a1a      	ldr	r2, [pc, #104]	; (80007b8 <GPIO_IRQInterruptConfig+0xfc>)
 8000750:	430b      	orrs	r3, r1
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	e025      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >31 && IRQNumber <64)
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b1f      	cmp	r3, #31
 800075a:	d90f      	bls.n	800077c <GPIO_IRQInterruptConfig+0xc0>
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	2b3f      	cmp	r3, #63	; 0x3f
 8000760:	d80c      	bhi.n	800077c <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |=(1<<IRQNumber % 32);
 8000762:	4b16      	ldr	r3, [pc, #88]	; (80007bc <GPIO_IRQInterruptConfig+0x100>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	79fa      	ldrb	r2, [r7, #7]
 8000768:	f002 021f 	and.w	r2, r2, #31
 800076c:	2101      	movs	r1, #1
 800076e:	fa01 f202 	lsl.w	r2, r1, r2
 8000772:	4611      	mov	r1, r2
 8000774:	4a11      	ldr	r2, [pc, #68]	; (80007bc <GPIO_IRQInterruptConfig+0x100>)
 8000776:	430b      	orrs	r3, r1
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	e012      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
		else if(IRQNumber >=6 && IRQNumber <96)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b05      	cmp	r3, #5
 8000780:	d90f      	bls.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	2b5f      	cmp	r3, #95	; 0x5f
 8000786:	d80c      	bhi.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER3 |=(1<<IRQNumber %64);
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <GPIO_IRQInterruptConfig+0x104>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	4611      	mov	r1, r2
 800079a:	4a09      	ldr	r2, [pc, #36]	; (80007c0 <GPIO_IRQInterruptConfig+0x104>)
 800079c:	430b      	orrs	r3, r1
 800079e:	6013      	str	r3, [r2, #0]
}
 80007a0:	e7ff      	b.n	80007a2 <GPIO_IRQInterruptConfig+0xe6>
 80007a2:	bf00      	nop
 80007a4:	370c      	adds	r7, #12
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000e104 	.word	0xe000e104
 80007b4:	e000e10c 	.word	0xe000e10c
 80007b8:	e000e180 	.word	0xe000e180
 80007bc:	e000e184 	.word	0xe000e184
 80007c0:	e000e18c 	.word	0xe000e18c

080007c4 <GPIO_IRQPriorityConfig>:
 * we have to divide 236/4 since 4 section we will get 59 i.e, 59 IPR
 * we will find the section 236 % 4 i.e., =0 so we will program IRQ236_PRI
 *
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	460a      	mov	r2, r1
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	4613      	mov	r3, r2
 80007d2:	71bb      	strb	r3, [r7, #6]
	// 1.First lets find out the IPR Register
	//Lower Priority bits are not implemented
	uint8_t iprx = IRQNumber /4;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber%4;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	f003 0303 	and.w	r3, r3, #3
 80007e0:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_amount = (8 *iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	00db      	lsls	r3, r3, #3
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	3304      	adds	r3, #4
 80007ea:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASEADDR + iprx) |= (IRQPriority << shift_amount);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007f4:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	79b9      	ldrb	r1, [r7, #6]
 80007fc:	7b7b      	ldrb	r3, [r7, #13]
 80007fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000802:	4619      	mov	r1, r3
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800080c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000810:	430a      	orrs	r2, r1
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr
	...

08000820 <__libc_init_array>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	2600      	movs	r6, #0
 8000824:	4d0c      	ldr	r5, [pc, #48]	; (8000858 <__libc_init_array+0x38>)
 8000826:	4c0d      	ldr	r4, [pc, #52]	; (800085c <__libc_init_array+0x3c>)
 8000828:	1b64      	subs	r4, r4, r5
 800082a:	10a4      	asrs	r4, r4, #2
 800082c:	42a6      	cmp	r6, r4
 800082e:	d109      	bne.n	8000844 <__libc_init_array+0x24>
 8000830:	f000 f822 	bl	8000878 <_init>
 8000834:	2600      	movs	r6, #0
 8000836:	4d0a      	ldr	r5, [pc, #40]	; (8000860 <__libc_init_array+0x40>)
 8000838:	4c0a      	ldr	r4, [pc, #40]	; (8000864 <__libc_init_array+0x44>)
 800083a:	1b64      	subs	r4, r4, r5
 800083c:	10a4      	asrs	r4, r4, #2
 800083e:	42a6      	cmp	r6, r4
 8000840:	d105      	bne.n	800084e <__libc_init_array+0x2e>
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f855 3b04 	ldr.w	r3, [r5], #4
 8000848:	4798      	blx	r3
 800084a:	3601      	adds	r6, #1
 800084c:	e7ee      	b.n	800082c <__libc_init_array+0xc>
 800084e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000852:	4798      	blx	r3
 8000854:	3601      	adds	r6, #1
 8000856:	e7f2      	b.n	800083e <__libc_init_array+0x1e>
 8000858:	08000890 	.word	0x08000890
 800085c:	08000890 	.word	0x08000890
 8000860:	08000890 	.word	0x08000890
 8000864:	08000894 	.word	0x08000894

08000868 <memset>:
 8000868:	4603      	mov	r3, r0
 800086a:	4402      	add	r2, r0
 800086c:	4293      	cmp	r3, r2
 800086e:	d100      	bne.n	8000872 <memset+0xa>
 8000870:	4770      	bx	lr
 8000872:	f803 1b01 	strb.w	r1, [r3], #1
 8000876:	e7f9      	b.n	800086c <memset+0x4>

08000878 <_init>:
 8000878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087a:	bf00      	nop
 800087c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087e:	bc08      	pop	{r3}
 8000880:	469e      	mov	lr, r3
 8000882:	4770      	bx	lr

08000884 <_fini>:
 8000884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000886:	bf00      	nop
 8000888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800088a:	bc08      	pop	{r3}
 800088c:	469e      	mov	lr, r3
 800088e:	4770      	bx	lr
